/* CSS3 Prefixes
 * @param {*} $property - Property
 * @param {*} $value - Value
 */
@mixin css3-prefix($property, $value) {
  #{$property}: #{$value};
  -o-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -webkit-#{$property}: #{$value};
}

/* Align Items
 * @param stretch|center|flex-start|flex-end|baseline|initial|inherit} $value - Value
 */
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
  @include css3-prefix('align-items', $value);
}
/* Animation
 * @param {name duration timing-function delay iteration-count direction fill-mode play-state} $value - Value
 */
@mixin animation($value) {
  @include css3-prefix('animation', $value);
}
/* Clip Path
 * @param {none|clip-source|basic-shape|geometry-box} $value - Value
 */
@mixin clip-path($value: none) {
  @include css3-prefix('clip-path', $value);
}
/* Display Flex
 * @param {true|false} $is_important - Is important
 */
@mixin display-flex() {
  display: flex;
  display: -ms-flexbox;
  display: -moz-box;
  display: -khtml-flex;
  display: -webkit-flex;
}
/* Filter
 * @param {none/filter-functions} $value - Value
 */
@mixin filter($value: none) {
  @include css3-prefix('filter', $value);
}
/* Filter Blur
 * @param {length} $value - Value
 */
@mixin filter-blur($value: 0) {
  @include css3-prefix('filter', blur($value));
}
/* Filter Grayscale
 * @param {percent} $value - Value
 */
@mixin filter-grayscale($value: 0) {
  @include css3-prefix('filter', grayscale($value));
}
/* Flex
 * @param {flex-grow flex-shrink flex-basis|auto|initial|inherit} $value - Value
 */
@mixin flex($value: 0 1 auto) {
  @include css3-prefix('flex', $value);
}
/* Flex Direction
 * @param {row|row-reverse|column|column-reverse|initial|inherit} $value - Value
 */
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
  @include css3-prefix('flex-direction', $value);
}
/* Justify Content
 * @param {flex-start|flex-end|center|space-between|space-around|initial|inherit} $value - Value
 */
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
  @include css3-prefix('justify-content', $value);
}
/* Opacity
 * @param {number} $value - Value
 */
@mixin opacity($value: 1) {
  @include css3-prefix('opacity', $value);
  filter: alpha(opacity=#{$value * 100});
  filter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$value * 100});
  opacity: $value;
}
/* Order
 * @param {number|initial|inherit} $value - Value
 */
@mixin order($value: 0) {
	order: $value;
  -webkit-order: $value;
  -moz-order: $value;
  -ms-flex-order: $value;
  -webkit-box-ordinal-group: $value + 1;
}
/* Perspective
 * @param {length|none} $value - Value
 */
@mixin prespective($value: none) {
  @include css3-prefix('perspective', $value);
}
/* Placeholder
 * @param {}
 */
@mixin placeholder() {
  &::-webkit-input-placeholder { // For Chrome / Opera / Safari
    @content;
  }
  &::-moz-placeholder { // For Firefox 19 and up
    @content;
  }
  &:-moz-placeholder { // For Firefox 18 and earlier versions
    @content;
  }
  &:-ms-input-placeholder { // For IE10 and up
    @content;
  }
}
/* Selection
 * @param {}
 */
@mixin selection() {
  ::-moz-selection {
    @content;
  }
  ::selection {
    @content;
  }
}
/* Transform
 * @param {none|transform-functions|initial|inherit} $value - Value
 */
@mixin transform($value: none) {
  @include css3-prefix('transform', $value);
}
/* Transform Origin
 * @param {x-axis y-axis z-axis|initial|inherit;} $value - Value
 */
@mixin transform-origin($value: 50% 50% 0) {
  @include css3-prefix('transform-origin', $value);
}
/* Transform Rotate
 * @param {number} $value - Value
 */
@mixin transform-rotate($value: 0) {
  @include css3-prefix('transform', rotate($value));
}
/* Transform Scale
 * @param {number} $value - Value
 */
@mixin transform-scale($value...) {
  @include css3-prefix('transform', scale($value));
}
/* Transform Scale X
 * @param {number} $value - Value
 */
@mixin transform-scaleX($value...) {
  @include css3-prefix('transform', scaleX($value));
}
/* Transform Scale Y
 * @param {number} $value - Value
 */
@mixin transform-scaleY($value...) {
  @include css3-prefix('transform', scaleY($value));
}
/* Transform Translate
 * @param {number} $value - Value
 */
@mixin transform-translate($value...) {
  @include css3-prefix('transform', translate($value));
}
/* Transform Translate X
 * @param {number} $value - Value
 */
@mixin transform-translateX($value: 0) {
  @include css3-prefix('transform', translateX($value));
}
/* Transform Translate Y
 * @param {number} $value - Value
 */
@mixin transform-translateY($value: 0) {
  @include css3-prefix('transform', translateY($value));
}
/* Transform Translate Z
 * @param {number} $value - Value
 */
@mixin transform-translateZ($value: 0) {
  @include css3-prefix('transform', translateZ($value));
}
/* Transform Translate 3d
 * @param {length|none} $value - Value
 */
@mixin translate3d($value...) {
  @include css3-prefix('transform', translate3d($value));
}
/* Transition
 * @param {css-property duration timing-function|none|initial|inherit} $value - Value
 */
@mixin transition($value: all 0s ease 0s) {
  @include css3-prefix('transition', $value);
}
